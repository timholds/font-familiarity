name: Claude Project Sync

# Syncs all files in the repository with the "Project Knowledge" section of a Claude project

# Step 1: Get the CLAUDE_TOKEN value from inspect / application / cookies / sessionKey (starts with "sk-ant-")
# and CLAUDE_TOKEN as a secret in the repository settings / secrets and variables / actions / repository secrets

# Step 2: Get the CLAUDE_PROJECT_ID from the URL of the project in Claude and add it as another repository secret

# Step 3: optionally, create a .claudeinclude file and put the files/folders you want to include there, 
# Otherwise, it will update all files listed in .gitignore and .claudeignore

# Sometimes it fails, but rerunning it usually works.

on:
  push:
    branches: [main, char]
  pull_request:
    branches: [main, char]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  sync-to-claude:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history for the repository

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Claude API authentication script
        env:
          CLAUDE_TOKEN: ${{ secrets.CLAUDE_TOKEN }}
          CLAUDE_PROJECT_ID: ${{ secrets.CLAUDE_PROJECT_ID }}
        run: |
          # Create a file to test Claude API authentication
          cat > test_claude_auth.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import requests
          import sys
          import json
          import urllib.request
          import urllib.error
          import urllib.parse
          import gzip

          # Configuration
          CLAUDE_TOKEN = os.environ.get('CLAUDE_TOKEN')
          PROJECT_ID = os.environ.get('CLAUDE_PROJECT_ID')

          if not CLAUDE_TOKEN or not PROJECT_ID:
              print("Error: Missing CLAUDE_TOKEN or PROJECT_ID environment variables")
              sys.exit(1)
              
          # Claude API endpoints
          API_URL = "https://claude.ai/api"
          ORGANIZATION_URL = f"{API_URL}/organizations"

          def _make_request(method, endpoint, data=None):
              url = f"{API_URL}{endpoint}"
              headers = {
                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0",
                  "Content-Type": "application/json",
                  "Accept-Encoding": "gzip",
              }
              
              cookies = {
                  "sessionKey": CLAUDE_TOKEN,
              }
              
              # Prepare the request
              req = urllib.request.Request(url, method=method)
              for key, value in headers.items():
                  req.add_header(key, value)

              # Add cookies
              cookie_string = "; ".join([f"{k}={v}" for k, v in cookies.items()])
              req.add_header("Cookie", cookie_string)

              # Add data if present
              if data:
                  json_data = json.dumps(data).encode("utf-8")
                  req.data = json_data

              try:
                  # Make the request
                  with urllib.request.urlopen(req) as response:
                      print(f"Response status code: {response.status}")
                      
                      # Handle gzip encoding
                      if response.headers.get("Content-Encoding") == "gzip":
                          content = gzip.decompress(response.read())
                      else:
                          content = response.read()

                      content_str = content.decode("utf-8")
                      return json.loads(content_str)
              except urllib.error.HTTPError as e:
                  print(f"HTTP Error: {e.code} - {e.reason}")
                  try:
                      if e.headers.get("Content-Encoding") == "gzip":
                          error_content = gzip.decompress(e.read())
                      else:
                          error_content = e.read()
                          
                      error_str = error_content.decode("utf-8")
                      print(f"Error response: {error_str}")
                  except:
                      print("Could not decode error response")
                  sys.exit(1)
                  
          try:
              print("Testing Claude API authentication...")
              orgs = _make_request("GET", "/organizations")
              if not orgs:
                  print("Error: No organizations found")
                  sys.exit(1)
                  
              print(f"Success! Found {len(orgs)} organizations")
              
              # Get the first organization with chat capability
              org_id = None
              for org in orgs:
                  capabilities = org.get("capabilities", [])
                  if "chat" in capabilities and (
                      "claude_pro" in capabilities or 
                      "raven" in capabilities
                  ):
                      org_id = org["uuid"]
                      print(f"Selected organization: {org['name']} (ID: {org_id})")
                      break
                      
              if not org_id:
                  print("Error: No organization with required capabilities found")
                  sys.exit(1)
              
              # Test project access
              projects = _make_request("GET", f"/organizations/{org_id}/projects")
              
              print(f"Success! Found {len(projects)} projects")
              
              # Check for our specific project
              project_found = False
              for project in projects:
                  if project["uuid"] == PROJECT_ID:
                      print(f"Found project: {project['name']} (ID: {PROJECT_ID})")
                      project_found = True
                      break
                      
              if not project_found:
                  print(f"Warning: Project with ID {PROJECT_ID} not found in organization {org_id}")
                  
              print("Authentication test completed successfully!")
              
          except Exception as e:
              print(f"Error: An unexpected error occurred: {e}")
              sys.exit(1)
          EOF

          # Make the test script executable
          chmod +x test_claude_auth.py

          # Run the authentication test
          python test_claude_auth.py

      - name: Sync with Claude Project
        env:
          CLAUDE_TOKEN: ${{ secrets.CLAUDE_TOKEN }}
          CLAUDE_PROJECT_ID: ${{ secrets.CLAUDE_PROJECT_ID }}
        run: |
          # Create a Python script for syncing
          cat > sync_to_claude.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import json
          import base64
          import sys
          import gzip
          import time
          import urllib.request
          import urllib.error
          import urllib.parse
          from pathlib import Path
          from fnmatch import fnmatch

          # Configuration
          CLAUDE_TOKEN = os.environ.get('CLAUDE_TOKEN')
          PROJECT_ID = os.environ.get('CLAUDE_PROJECT_ID')

          if not CLAUDE_TOKEN or not PROJECT_ID:
              print("Error: Missing CLAUDE_TOKEN or PROJECT_ID environment variables")
              sys.exit(1)
              
          # Claude API endpoints
          API_URL = "https://claude.ai/api"
          RETRY_DELAY = 15
          MAX_RETRIES = 3

          # Maximum file size
          MAX_FILE_SIZE = 512 * 1024  # 512KB
              
          def _make_request(method, endpoint, data=None, retry_count=0):
              time.sleep(1)
              url = f"{API_URL}{endpoint}"
              headers = {
                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:129.0) Gecko/20100101 Firefox/129.0",
                  "Content-Type": "application/json",
                  "Accept-Encoding": "gzip",
              }
              
              cookies = {
                  "sessionKey": CLAUDE_TOKEN,
              }
              
              # Prepare the request
              req = urllib.request.Request(url, method=method)
              for key, value in headers.items():
                  req.add_header(key, value)

              # Add cookies
              cookie_string = "; ".join([f"{k}={v}" for k, v in cookies.items()])
              req.add_header("Cookie", cookie_string)

              # Add data if present
              if data:
                  json_data = json.dumps(data).encode("utf-8")
                  req.data = json_data

              try:
                  # Make the request
                  with urllib.request.urlopen(req) as response:
                      # Handle gzip encoding
                      if response.headers.get("Content-Encoding") == "gzip":
                          content = gzip.decompress(response.read())
                      else:
                          content = response.read()

                      content_str = content.decode("utf-8")
                      if not content:
                          return None
                          
                      return json.loads(content_str)
              except urllib.error.HTTPError as e:
                  # If we get a 403 error and haven't reached max retries, retry
                  if e.code == 403 and retry_count < MAX_RETRIES:
                      print(f"Received 403 error. Retrying in {RETRY_DELAY} seconds... (Attempt {retry_count + 1}/{MAX_RETRIES})")
                      time.sleep(RETRY_DELAY)
                      return _make_request(method, endpoint, data, retry_count + 1)
                      
                  print(f"HTTP Error: {e.code} - {e.reason}")
                  try:
                      if e.headers.get("Content-Encoding") == "gzip":
                          error_content = gzip.decompress(e.read())
                      else:
                          error_content = e.read()
                          
                      error_str = error_content.decode("utf-8")
                      print(f"Error response: {error_str}")
                  except:
                      print("Could not decode error response")
                  return None

          # Base excluded patterns (always excluded regardless of mode)
          BASE_EXCLUDE_PATTERNS = [
              ".git/**"
          ]

          # Check for .claudeinclude file first
          USE_INCLUDE_MODE = False
          INCLUDE_PATTERNS = []

          def parse_claudeinclude_file():
              """Parse .claudeinclude file and build inclusion patterns."""
              if not os.path.exists('.claudeinclude'):
                  return False, []
                  
              patterns = []
              try:
                  with open('.claudeinclude', 'r') as f:
                      for line in f:
                          line = line.strip()
                          # Skip empty lines and comments
                          if not line or line.startswith('#'):
                              continue
                              
                          # Handle directory indicator (trailing slash)
                          if line.endswith('/'):
                              line = line + '**'
                          
                          # If pattern doesn't contain a wildcard, add one to match directories
                          if '*' not in line and '?' not in line and os.path.isdir(line):
                              patterns.append(f"{line}/**")
                          else:
                              patterns.append(line)
                  
                  print(f"Found .claudeinclude file with {len(patterns)} inclusion patterns")
                  return True, patterns
              except Exception as e:
                  print(f"Error parsing .claudeinclude: {e}")
                  return False, []

          # Parse .gitignore and .claudeignore files and build exclusion patterns
          def parse_ignore_files():
              """Parse .gitignore and .claudeignore files and build exclusion patterns."""
              patterns = list(BASE_EXCLUDE_PATTERNS)
              
              # Parse .gitignore file
              gitignore_patterns = parse_ignore_file('.gitignore')
              if gitignore_patterns:
                  patterns.extend(gitignore_patterns)
                  
              # Parse .claudeignore file
              claudeignore_patterns = parse_ignore_file('.claudeignore')
              if claudeignore_patterns:
                  patterns.extend(claudeignore_patterns)
                  
              if len(patterns) == len(BASE_EXCLUDE_PATTERNS):
                  # If no ignore patterns were found, use default patterns
                  print("No .gitignore or .claudeignore files found, using default exclusion patterns")
                  return patterns + [
                      "node_modules/**",
                      "dist/**",
                      "build/**",
                      "**/*.pyc",
                      "**/__pycache__/**",
                      ".env",
                      "**/vendor/**",
                      "**/.vscode/**",
                      "**/.idea/**",
                      "**/bin/**",
                      "**/obj/**",
                      "**/.DS_Store",
                      "**/*.exe",
                      "**/*.dll",
                      "**/*.so",
                      "**/*.dylib"
                  ]
              
              return patterns
              
          def parse_ignore_file(filename):
              """Parse a single ignore file like .gitignore or .claudeignore."""
              if not os.path.exists(filename):
                  return []
                  
              patterns = []
              try:
                  with open(filename, 'r') as f:
                      for line in f:
                          line = line.strip()
                          # Skip empty lines and comments
                          if not line or line.startswith('#'):
                              continue
                              
                          # Convert pattern to glob pattern
                          # Remove leading slash if present
                          if line.startswith('/'):
                              line = line[1:]
                          
                          # Handle directory indicator (trailing slash)
                          if line.endswith('/'):
                              line = line + '**'
                          
                          # If pattern doesn't contain a wildcard, add one to match directories
                          if '*' not in line and '?' not in line:
                              # Check if it's a file or directory pattern
                              if os.path.isdir(line):
                                  patterns.append(f"{line}/**")
                              else:
                                  patterns.append(line)
                          else:
                              patterns.append(line)
                          
                          # Also add pattern with leading **/ to match in subdirectories
                          if not line.startswith('**/'):
                              patterns.append(f"**/{line}")
                  
                  print(f"Parsed {len(patterns)} patterns from {filename}")
                  return patterns
              except Exception as e:
                  print(f"Error parsing {filename}: {e}")
                  return []

          # Check for .claudeinclude first
          USE_INCLUDE_MODE, INCLUDE_PATTERNS = parse_claudeinclude_file()

          # If not using include mode, get the exclusion patterns
          EXCLUDE_PATTERNS = []
          if not USE_INCLUDE_MODE:
              EXCLUDE_PATTERNS = parse_ignore_files()

              # Add additional patterns to exclude common binary/large files
              ADDITIONAL_EXCLUDE_PATTERNS = [
                  "**/*.ttf",
                  "**/*.woff",
                  "**/*.woff2",
                  "**/*.eot",
                  "**/*.png",
                  "**/*.jpg",
                  "**/*.jpeg",
                  "**/*.gif",
                  "**/*.ico",
                  "**/*.svg",
                  "**/*.mp3",
                  "**/*.mp4",
                  "**/*.webm",
                  "**/*.webp",
                  "**/*.zip",
                  "**/*.tar",
                  "**/*.gz",
                  "**/*.rar"
              ]
              EXCLUDE_PATTERNS.extend(ADDITIONAL_EXCLUDE_PATTERNS)

          def should_include_file(file_path):
              """
              Determine if a file should be included in the sync.
              In include mode: file must match one of the include patterns.
              In exclude mode: file must not match any exclude patterns.
              """
              file_path_str = str(file_path)
              
              # Always exclude sync scripts and config files
              if file_path_str in ['.gitignore', '.claudeignore', '.claudeinclude', 'sync_to_claude.py', 'test_claude_auth.py']:
                  return False
              
              # Include mode: file must match one of the include patterns
              if USE_INCLUDE_MODE:
                  for pattern in INCLUDE_PATTERNS:
                      if fnmatch(file_path_str, pattern):
                          return True
                  return False  # If no patterns match, exclude the file
              
              # Always exclude .git directory
              if fnmatch(file_path_str, ".git/**"):
                  return False
              
              # Exclude mode: handle negation patterns
              included = False
              excluded = False
              
              for pattern in EXCLUDE_PATTERNS:
                  # Handle negation patterns
                  if pattern.startswith('!'):
                      negated_pattern = pattern[1:]
                      if fnmatch(file_path_str, negated_pattern):
                          included = True
                  elif fnmatch(file_path_str, pattern):
                      excluded = True
              
              # If explicitly included by a negation pattern, override exclusion
              if included:
                  return True
                  
              return not excluded  # Include if not excluded

          def get_file_content(file_path):
              """Read and return the content of a file"""
              try:
                  with open(file_path, 'rb') as f:
                      content = f.read()
                      if len(content) > MAX_FILE_SIZE:
                          print(f"Warning: Skipping {file_path} (exceeds max size of {MAX_FILE_SIZE} bytes)")
                          return None
                      return content
              except Exception as e:
                  print(f"Error reading {file_path}: {e}")
                  return None
                  
          def is_text_file(file_path, sample_size=8192):
              """
              Determines if a file is a text file by checking for null bytes.
              """
              try:
                  with open(file_path, "rb") as f:
                      return b"\x00" not in f.read(sample_size)
              except Exception:
                  return False

          def sync_files():
              """Sync files to Claude project"""
              # Get all files in the repository (current directory)
              all_files = []
              for path in Path('.').rglob('*'):
                  if path.is_file() and should_include_file(path) and is_text_file(path):
                      all_files.append(path)
              
              if USE_INCLUDE_MODE:
                  print(f"Including {len(all_files)} files from .claudeinclude patterns")
              else:
                  print(f"Found {len(all_files)} files to sync after applying exclusion patterns")
              
              # Test API access
              print("Testing Claude API connectivity...")
              org_list = _make_request("GET", "/organizations")
              if not org_list:
                  print("Error: Could not retrieve organizations. Authentication may have failed.")
                  sys.exit(1)
              
              # Display mode information
              if USE_INCLUDE_MODE:
                  print("Using INCLUDE mode with patterns from .claudeinclude")
              else:
                  print("Using EXCLUDE mode with patterns from .gitignore and .claudeignore")
                  
              # Find the organization that owns this project
              project_org_id = None
              for org in org_list:
                  projects = _make_request("GET", f"/organizations/{org['uuid']}/projects")
                  if not projects:
                      continue
                      
                  for project in projects:
                      if project["uuid"] == PROJECT_ID:
                          project_org_id = org["uuid"]
                          print(f"Found project in organization: {org['name']} (ID: {org['uuid']})")
                          break
                          
                  if project_org_id:
                      break
                      
              if not project_org_id:
                  print(f"Error: Could not find the project with ID {PROJECT_ID} in any organization")
                  sys.exit(1)
                  
              # Get existing files in the project
              project_docs_url = f"/organizations/{project_org_id}/projects/{PROJECT_ID}/docs"
              existing_files = _make_request("GET", project_docs_url)
              
              if existing_files is None:
                  print("Could not retrieve project files")
                  existing_file_paths = {}
              else:
                  existing_file_paths = {file.get('file_name'): file.get('uuid') for file in existing_files}
                  print(f"Found {len(existing_files)} existing files in Claude project")
              
              # Upload new files and update existing ones
              for file_path in all_files:
                  content = get_file_content(file_path)
                  if content is None:
                      continue
                  
                  try:
                      file_path_str = str(file_path)
                      
                      # Try to decode the content as text
                      try:
                          text_content = content.decode('utf-8')
                      except UnicodeDecodeError:
                          print(f"Skipping binary file: {file_path_str}")
                          continue
                      
                      # Prepare the file data
                      file_data = {
                          "file_name": file_path_str,
                          "content": text_content
                      }
                      
                      if file_path_str in existing_file_paths:
                          # Update existing file
                          file_id = existing_file_paths[file_path_str]
                          update_url = f"{project_docs_url}/{file_id}"
                          result = _make_request("PUT", update_url, file_data)
                          if result:
                              print(f"Updated: {file_path_str}")
                          else:
                              print(f"Failed to update: {file_path_str}")
                      else:
                          # Upload new file
                          result = _make_request("POST", project_docs_url, file_data)
                          if result:
                              print(f"Uploaded: {file_path_str}")
                          else:
                              print(f"Failed to upload: {file_path_str}")
                              
                      # Add a small delay to prevent rate limiting
                      time.sleep(10)
                      
                  except Exception as e:
                      print(f"Error syncing {file_path_str}: {e}")

          if __name__ == "__main__":
              print("Starting Claude project sync...")
              if USE_INCLUDE_MODE:
                  print("Using .claudeinclude file for file selection")
              else:
                  print("No .claudeinclude file found, using exclusion patterns")
              sync_files()
              print("Sync completed!")
          EOF

          # Make the script executable
          chmod +x sync_to_claude.py

          # Run the sync script
          python sync_to_claude.py