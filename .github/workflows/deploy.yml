name: Deploy to Production

# Add permissions for GitHub token
permissions:
  contents: read
  packages: write  # Needed to push to GitHub Container Registry

on:
  push:
    branches:
      - main
      - image_upload
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.prod.yml'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 137.184.232.187
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push web container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/freefontfinder:latest
            ghcr.io/${{ github.repository }}/freefontfinder:${{ github.sha }}
          no-cache: true

      # Install SSH key for server access
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # Verify server connection
      - name: Check server connection
        run: |
          if ! ssh -q root@${{ env.SERVER_IP }} exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi

      # Setup server directories and permissions
      - name: Setup server directories
        run: |
          ssh root@${{ env.SERVER_IP }} '
            # Create parent directories with proper permissions
            mkdir -p /var/www/freefontfinder
            mkdir -p /var/www/freefontfinder/model
            mkdir -p /var/www/freefontfinder/logs
            mkdir -p /var/www/freefontfinder/static
            mkdir -p /var/www/freefontfinder/templates
            mkdir -p /var/www/freefontfinder/ml
            
            # Ensure proper permissions
            chmod -R 755 /var/www/freefontfinder
          '
    
        # Ensure Docker and Docker Compose are installed
      - name: Install Docker and Docker Compose
        run: |
          ssh root@${{ env.SERVER_IP }} '
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              apt-get update
              apt-get install -y docker.io
            fi
            if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
              echo "Installing Docker Compose..."
              apt-get update
              apt-get install -y docker-compose-plugin
            fi
          '
      
      # Copy just the essential files to the server
      - name: Copy deployment files to server
        run: |
          scp docker-compose.prod.yml root@${{ env.SERVER_IP }}:/var/www/freefontfinder/docker-compose.yml
          scp nginx.conf root@${{ env.SERVER_IP }}:/var/www/freefontfinder/nginx.conf
          
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" > .env
          scp .env root@${{ env.SERVER_IP }}:/var/www/freefontfinder/.env
          
          # Verify SSL certificate files exist
          ssh root@${{ env.SERVER_IP }} '
            if [ ! -f "/etc/ssl/font.crt" ] || [ ! -f "/etc/ssl/font.key" ]; then
              echo "ERROR: SSL certificate files not found at /etc/ssl/font.crt and /etc/ssl/font.key"
              echo "Please ensure these files exist on the server"
              exit 1
            else
              echo "SSL certificate files verified"
              # Ensure permissions are correct
              chmod 644 /etc/ssl/font.crt
              chmod 600 /etc/ssl/font.key
            fi
          '

      # Increase wait time for service startup
      - name: Deploy with Docker Compose
        run: |
          ssh root@${{ env.SERVER_IP }} '
            cd /var/www/freefontfinder

            # Debug - check what image tag we have
            echo "Using image tag from .env: $(cat .env | grep IMAGE_TAG)"
      
            docker compose -f docker-compose.yml down --remove-orphans

            # Explicitly pull the SHA-tagged image first
            IMAGE_TAG=$(grep IMAGE_TAG .env | cut -d= -f2)
            echo "Pulling image with tag: $IMAGE_TAG"
            docker pull ghcr.io/timholds/font-familiarity/freefontfinder:$IMAGE_TAG || { echo "Pull failed"; exit 1; }
            
            # Then start with docker-compose as normal
            docker compose -f docker-compose.yml up -d
            
            echo "Waiting for services to start..."
            sleep 20
            docker ps
            
            # remove all stopped containers
            docker container prune -f

            # Clean up old images
            docker image ls "ghcr.io/timholds/font-familiarity/freefontfinder" --format "{{.ID}} {{.CreatedAt}}" | 
              sort -k2,3 -r | 
              awk "NR>3 {print \$1}" | 
              xargs -r docker rmi 2>/dev/null || true
            
            docker system prune -af --volumes
          '

      # Health check - run from server itself
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 30
          
          ssh root@${{ env.SERVER_IP }} '
            cd /var/www/freefontfinder
            
            # Check if containers are running
            echo "===== Container Status ====="
            docker compose ps
             
            # Check web service logs for errors
            echo "===== Web Service Logs ====="
            docker compose logs --tail 20 web
            
            # Test connection locally from the server itself
            echo "===== Testing API Endpoint ====="
            curl -s http://localhost/test && echo " - API endpoint test successful" || echo " - API endpoint test FAILED"
            
            # Check if nginx is responding
            echo "===== Testing Nginx ====="
            curl -I http://localhost && echo " - Nginx responding successfully" || echo " - Nginx check FAILED"
            
            # Check SSL if it should be active
            if [ -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "===== Testing SSL ====="
              curl -k -I https://localhost && echo " - HTTPS responding successfully" || echo " - HTTPS check FAILED"
            fi
          '
      
      # Notify on success
      - name: Deployment Result
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "The application is now running at https://freefontfinder.com/"