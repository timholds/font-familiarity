name: Deploy to Production

# Add permissions for GitHub token
permissions:
  contents: read
  packages: write  # Needed to push to GitHub Container Registry

on:
  push:
    branches:
      - main
      - docker
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push web container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/freefontfinder:latest

      # Install SSH key for server access
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # Verify server connection
      - name: Check server connection
        run: |
          if ! ssh -q root@137.184.232.187 exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi

      # Create a docker-compose.prod.yml file that uses the pre-built image
      - name: Create production docker-compose file
        run: |
          cat > docker-compose.prod.yml << 'EOL'
          version: '3.8'
          
          services:
            web:
              image: ghcr.io/${{ github.repository }}/freefontfinder:latest
              restart: always
              volumes:
                - model-data:/app/model
                - ./logs:/app/logs
              environment:
                - PYTHONUNBUFFERED=1
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/test"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 20s
            
            nginx:
              image: nginx:alpine
              restart: always
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/conf.d/default.conf
                - ./static:/app/static
                - ./certbot/conf:/etc/letsencrypt
                - ./certbot/www:/var/www/certbot
              depends_on:
                - web
            
            certbot:
              image: certbot/certbot
              restart: unless-stopped
              volumes:
                - ./certbot/conf:/etc/letsencrypt
                - ./certbot/www:/var/www/certbot
              entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
          
          volumes:
            model-data:
              driver: local
              driver_opts:
                type: 'none'
                o: 'bind'
                device: '/var/www/freefontfinder/model'
          EOL

      # Setup server directories and permissions
      - name: Setup server directories
        run: |
          ssh root@137.184.232.187 '
            # Create parent directories with proper permissions
            mkdir -p /var/www/freefontfinder
            mkdir -p /var/www/freefontfinder/model
            mkdir -p /var/www/freefontfinder/logs
            mkdir -p /var/www/freefontfinder/static
            mkdir -p /var/www/freefontfinder/certbot/conf
            mkdir -p /var/www/freefontfinder/certbot/www
            
            # Ensure proper permissions
            chmod -R 755 /var/www/freefontfinder
          '

      # Copy just the essential files to the server
      - name: Copy deployment files to server
        run: |
          scp docker-compose.prod.yml root@137.184.232.187:/var/www/freefontfinder/docker-compose.prod.yml
          scp nginx.conf root@137.184.232.187:/var/www/freefontfinder/nginx.conf
          
          # Copy static files (always needed by nginx)
          rsync -avz \
            static/ \
            root@137.184.232.187:/var/www/freefontfinder/static/

      # Check if SSL certificates already exist, if not, create a temp nginx config
      - name: Check and prepare SSL setup
        run: |
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Check if certificates already exist
            if [ ! -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "SSL certificates not found. Creating temporary nginx config for initial setup."
              
              # Create a temporary nginx config that works without SSL
              cat > /var/www/freefontfinder/nginx.temp.conf << "TEMPCONF"
          server {
              listen 80;
              listen [::]:80;
              server_name freefontfinder.com www.freefontfinder.com;
              
              # Certbot verification
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }
              
              # Serve app on HTTP for initial setup
              location / {
                  proxy_pass http://web:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_redirect off;
              }
              
              location /static {
                  alias /app/static;
                  expires 30d;
              }
          }
          TEMPCONF
              
              # Use the temporary config for initial deployment
              cp /var/www/freefontfinder/nginx.temp.conf /var/www/freefontfinder/nginx.conf
              echo "Using temporary nginx config for initial certificate acquisition."
            else
              echo "SSL certificates already exist. Using full SSL configuration."
            fi
          '

      # Deploy the application
      - name: Deploy with Docker Compose
        run: |
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Ensure docker is installed
            if ! command -v docker &> /dev/null; then
              apt-get update
              apt-get install -y docker.io
            fi
            
            # Install docker-compose using apt
            if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
              apt-get update
              apt-get install -y docker-compose-plugin
            fi
            
            # Check docker compose version and use appropriate syntax
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Pull the latest images
            $DOCKER_COMPOSE -f docker-compose.prod.yml pull
            
            # Stop existing containers
            $DOCKER_COMPOSE -f docker-compose.prod.yml down
            
            # Start containers
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d
            
            # Give services time to start
            echo "Waiting for services to start..."
            sleep 10
          '

      # Get certificates if they don't exist
      - name: Obtain SSL certificates if needed
        run: |
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Check if certificates already exist
            if [ ! -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "Obtaining SSL certificates..."
              
              # Stop certbot container (it will just keep renewing non-existent certs)
              if command -v docker compose &> /dev/null; then
                docker compose -f docker-compose.prod.yml stop certbot
              else
                docker-compose -f docker-compose.prod.yml stop certbot
              fi
              
              # Run certbot in standalone mode to get initial certificates
              docker run --rm \
                -v /var/www/freefontfinder/certbot/conf:/etc/letsencrypt \
                -v /var/www/freefontfinder/certbot/www:/var/www/certbot \
                --network host \
                certbot/certbot certonly --standalone \
                -d freefontfinder.com -d www.freefontfinder.com \
                --non-interactive --agree-tos \
                --email email@example.com \
                --no-eff-email
              
              # Copy the full nginx config back
              cp /var/www/freefontfinder/nginx.orig.conf /var/www/freefontfinder/nginx.conf
              
              # Restart nginx to use the new certs
              if command -v docker compose &> /dev/null; then
                docker compose -f docker-compose.prod.yml restart nginx
              else
                docker-compose -f docker-compose.prod.yml restart nginx
              fi
              
              echo "SSL certificates obtained and nginx restarted with SSL config."
            else
              echo "SSL certificates already exist. No need to obtain new ones."
            fi
          '

      # Health check - run from server itself
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 30
          
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Determine docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Check if containers are running
            echo "===== Container Status ====="
            $DOCKER_COMPOSE -f docker-compose.prod.yml ps
            
            # Check web service logs for errors
            echo "===== Web Service Logs ====="
            $DOCKER_COMPOSE -f docker-compose.prod.yml logs --tail 20 web
            
            # Test connection locally from the server itself
            echo "===== Testing API Endpoint ====="
            curl -s http://localhost/test && echo " - API endpoint test successful" || echo " - API endpoint test FAILED"
            
            # Check if nginx is responding
            echo "===== Testing Nginx ====="
            curl -I http://localhost && echo " - Nginx responding successfully" || echo " - Nginx check FAILED"
            
            # Check SSL if it should be active
            if [ -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "===== Testing SSL ====="
              curl -k -I https://localhost && echo " - HTTPS responding successfully" || echo " - HTTPS check FAILED"
            fi
          '
      
      # Notify on success
      - name: Deployment Result
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "The application is now running at https://freefontfinder.com/"