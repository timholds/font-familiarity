name: Deploy to Production

# Only run on pushes to main branch that modify relevant files
on:
  push:
    branches:
      - main
      - docker
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # First, verify server is reachable
      - name: Check server connection
        run: |
          if ! ssh -q root@137.184.232.187 exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi
          
      # Ensure Docker is installed on the server
      - name: Ensure Docker is installed
        run: |
          echo "Checking Docker installation..."
          ssh root@137.184.232.187 '
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi
            
            echo "Docker version:"
            docker --version
            echo "Docker Compose version:"
            docker-compose --version
          '
          
      # Create required directories on the server
      - name: Prepare server directories
        run: |
          echo "Creating required directories..."
          ssh root@137.184.232.187 '
            mkdir -p /var/www/freefontfinder/{model,logs,static,templates,ml}
          '

      # Copy Docker configuration files
      - name: Copy Docker files
        run: |
          echo "Copying Docker configuration files..."
          rsync -avz \
            Dockerfile \
            docker-compose.yml \
            nginx.conf \
            frontend_requirements.txt \
            frontend_app.py \
            root@137.184.232.187:/var/www/freefontfinder/

      # Copy application code
      - name: Copy application code
        run: |
          echo "Copying application code..."
          rsync -avz \
            --exclude '__pycache__/' \
            --exclude '*.pyc' \
            ml/ \
            root@137.184.232.187:/var/www/freefontfinder/ml/
          
          rsync -avz \
            templates/ \
            root@137.184.232.187:/var/www/freefontfinder/templates/
          
          rsync -avz \
            static/ \
            root@137.184.232.187:/var/www/freefontfinder/static/

      # Copy model files if they don't exist (first deployment only)
      - name: Copy model files if needed
        run: |
          echo "Checking model files..."
          ssh root@137.184.232.187 '
            if [ ! -f /var/www/freefontfinder/model/fontCNN_BS64-ED512-IC32.pt ]; then
              echo "Model file missing. Please manually upload model files to the server."
              echo "Required files:"
              echo "- /var/www/freefontfinder/model/fontCNN_BS64-ED512-IC32.pt"
              echo "- /var/www/freefontfinder/model/class_embeddings_512.npy"
              echo "- /var/www/freefontfinder/model/label_mapping.npy"
              exit 1
            fi
            
            if [ ! -f /var/www/freefontfinder/model/class_embeddings_512.npy ] || [ ! -f /var/www/freefontfinder/model/label_mapping.npy ]; then
              echo "Embedding or label mapping files missing. Please upload them manually."
              exit 1
            fi
            
            echo "All model files found."
          '

      # Deploy with Docker Compose
      - name: Deploy with Docker Compose
        run: |
          echo "Deploying with Docker Compose..."
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Create backup of logs before taking down containers
            if [ -d logs ] && [ "$(ls -A logs)" ]; then
              echo "Backing up logs..."
              mkdir -p log_backups
              tar -czvf "log_backups/logs_$(date +%Y%m%d_%H%M%S).tar.gz" logs/
            fi
            
            # Stop existing containers
            docker-compose down
            
            # Build and start containers
            docker-compose build --no-cache
            docker-compose up -d
            
            # Show container status
            docker-compose ps
          '

      # Health check
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 15
          
          ssh root@137.184.232.187 '
            # Check container status
            cd /var/www/freefontfinder
            docker-compose ps
            
            # Check web container logs
            echo "Web container logs:"
            docker-compose logs web --tail 20
            
            # Check nginx container logs
            echo "Nginx container logs:"
            docker-compose logs nginx --tail 20
            
            # Test connection
            echo "Testing connection..."
            curl -v http://localhost/test
            
            # Check if the service is actually working
            if curl -s http://localhost/test | grep -q "Flask server is running!"; then
              echo "Health check passed! Application is running correctly."
            else
              echo "WARNING: Application health check failed!"
              exit 1
            fi
          '