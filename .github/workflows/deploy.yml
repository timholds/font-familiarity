name: Deploy to Production

# Add permissions for GitHub token
permissions:
  contents: read
  packages: write  # Needed to push to GitHub Container Registry

on:
  push:
    branches:
      - main
      - image_upload
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push web container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/freefontfinder:latest

      # Install SSH key for server access
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # Verify server connection
      - name: Check server connection
        run: |
          if ! ssh -q root@137.184.232.187 exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi

      # Create a docker-compose.prod.yml file that uses the pre-built image
      - name: Create production docker-compose file
        run: |
          cat > docker-compose.prod.yml << 'EOL'
          version: '3.8'
          
          services:
            web:
              image: ghcr.io/${{ github.repository }}/freefontfinder:latest
              restart: always
              volumes:
                - model-data:/app/model
                - ./logs:/app/logs
              environment:
                - PYTHONUNBUFFERED=1
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/test"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 20s
            
            nginx:
              image: nginx:alpine
              restart: always
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/conf.d/default.conf
                - ./static:/app/static
                - ./certbot/conf:/etc/letsencrypt
                - ./certbot/www:/var/www/certbot
              depends_on:
                - web
            
            certbot:
              image: certbot/certbot
              restart: unless-stopped
              volumes:
                - ./certbot/conf:/etc/letsencrypt
                - ./certbot/www:/var/www/certbot
              entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
          
          volumes:
            model-data:
              driver: local
              driver_opts:
                type: 'none'
                o: 'bind'
                device: '/var/www/freefontfinder/model'
          EOL

      # Setup server directories and permissions
      - name: Setup server directories
        run: |
          ssh root@137.184.232.187 '
            # Create parent directories with proper permissions
            mkdir -p /var/www/freefontfinder
            mkdir -p /var/www/freefontfinder/model
            mkdir -p /var/www/freefontfinder/logs
            mkdir -p /var/www/freefontfinder/static
            mkdir -p /var/www/freefontfinder/certbot/conf
            mkdir -p /var/www/freefontfinder/certbot/www
            
            # Ensure proper permissions
            chmod -R 755 /var/www/freefontfinder
          '

      # Create required SSL configuration files if they don't exist
      - name: Setup SSL config files
        run: |
          # Create the files locally first
          mkdir -p certbot_temp/conf
          
          # Create options-ssl-nginx.conf
          cat > certbot_temp/conf/options-ssl-nginx.conf << 'EOL'
          # This file contains important security parameters. If you modify this file
          # manually, Certbot will be unable to automatically update it in the future!

          ssl_session_cache shared:le_nginx_SSL:10m;
          ssl_session_timeout 1440m;
          ssl_session_tickets off;

          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers off;

          ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
          EOL
          
          # Create ssl-dhparams.pem
          cat > certbot_temp/conf/ssl-dhparams.pem << 'EOL'
          -----BEGIN DH PARAMETERS-----
          MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
          +8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
          87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
          YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
          7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
          ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
          -----END DH PARAMETERS-----
          EOL
          
          # Create a script to check and copy files on the server
          cat > setup_ssl_files.sh << 'EOL'
          #!/bin/bash
          cd /var/www/freefontfinder
          
          # Check for options-ssl-nginx.conf
          if [ ! -f "certbot/conf/options-ssl-nginx.conf" ]; then
            echo "Installing options-ssl-nginx.conf..."
            cp /tmp/certbot_temp/options-ssl-nginx.conf certbot/conf/
            chmod 644 certbot/conf/options-ssl-nginx.conf
          else
            echo "options-ssl-nginx.conf already exists"
          fi
          
          # Check for ssl-dhparams.pem
          if [ ! -f "certbot/conf/ssl-dhparams.pem" ]; then
            echo "Installing ssl-dhparams.pem..."
            cp /tmp/certbot_temp/ssl-dhparams.pem certbot/conf/
            chmod 644 certbot/conf/ssl-dhparams.pem
          else
            echo "ssl-dhparams.pem already exists"
          fi
          EOL
          
          # Make the script executable
          chmod +x setup_ssl_files.sh
          
          # Copy the files to the server
          ssh root@137.184.232.187 'mkdir -p /tmp/certbot_temp'
          scp certbot_temp/conf/* root@137.184.232.187:/tmp/certbot_temp/
          scp setup_ssl_files.sh root@137.184.232.187:/tmp/
          
          # Execute the script on the server
          ssh root@137.184.232.187 'bash /tmp/setup_ssl_files.sh'
      
      # Copy just the essential files to the server
      - name: Copy deployment files to server
        run: |
          scp docker-compose.prod.yml root@137.184.232.187:/var/www/freefontfinder/docker-compose.prod.yml
          scp nginx.conf root@137.184.232.187:/var/www/freefontfinder/nginx.conf
          
          # Copy static files (always needed by nginx)
          rsync -avz \
            static/ \
            root@137.184.232.187:/var/www/freefontfinder/static/

      # Deploy the application
      - name: Deploy with Docker Compose
        run: |
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Ensure docker is installed
            if ! command -v docker &> /dev/null; then
              apt-get update
              apt-get install -y docker.io
            fi
            
            # Install docker-compose using apt
            if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
              apt-get update
              apt-get install -y docker-compose-plugin
            fi
            
            # Check docker compose version and use appropriate syntax
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Pull the latest images
            $DOCKER_COMPOSE -f docker-compose.prod.yml pull
            
            # Stop existing containers
            $DOCKER_COMPOSE -f docker-compose.prod.yml down
            
            # Start containers
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d
            
            # Give services time to start
            echo "Waiting for services to start..."
            sleep 10
          '

      # Health check - run from server itself
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 30
          
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Determine docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Check if containers are running
            echo "===== Container Status ====="
            $DOCKER_COMPOSE -f docker-compose.prod.yml ps
            
            # Check web service logs for errors
            echo "===== Web Service Logs ====="
            $DOCKER_COMPOSE -f docker-compose.prod.yml logs --tail 20 web
            
            # Test connection locally from the server itself
            echo "===== Testing API Endpoint ====="
            curl -s http://localhost/test && echo " - API endpoint test successful" || echo " - API endpoint test FAILED"
            
            # Check if nginx is responding
            echo "===== Testing Nginx ====="
            curl -I http://localhost && echo " - Nginx responding successfully" || echo " - Nginx check FAILED"
            
            # Check SSL if it should be active
            if [ -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "===== Testing SSL ====="
              curl -k -I https://localhost && echo " - HTTPS responding successfully" || echo " - HTTPS check FAILED"
            fi
          '
      
      # Notify on success
      - name: Deployment Result
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "The application is now running at https://freefontfinder.com/"