name: Deploy to Production

# Add permissions for GitHub token
permissions:
  contents: read
  packages: write  # Needed to push to GitHub Container Registry

on:
  push:
    branches:
      - main
      - docker
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push web container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/freefontfinder:latest

      # Install SSH key for server access
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # Verify server connection
      - name: Check server connection
        run: |
          if ! ssh -q root@137.184.232.187 exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi

      # Create a docker-compose.prod.yml file that uses the pre-built image
      - name: Create production docker-compose file
        run: |
          cat > docker-compose.prod.yml << 'EOL'
          version: '3.8'
          
          services:
            web:
              image: ghcr.io/${{ github.repository }}/freefontfinder:latest
              restart: always
              volumes:
                - /var/www/freefontfinder/model:/app/model
                - /var/www/freefontfinder/logs:/app/logs
              environment:
                - PYTHONUNBUFFERED=1
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/test"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 20s
          
            nginx:
              image: nginx:alpine
              restart: always
              ports:
                - "80:80"
              volumes:
                - ./nginx.conf:/etc/nginx/conf.d/default.conf
                - ./static:/app/static
              depends_on:
                - web
          EOL

      # Copy just the essential files to the server
      - name: Copy deployment files to server
        run: |
          scp docker-compose.prod.yml root@137.184.232.187:/var/www/freefontfinder/docker-compose.prod.yml
          scp nginx.conf root@137.184.232.187:/var/www/freefontfinder/nginx.conf
          
          # Copy static files (always needed by nginx)
          rsync -avz \
            static/ \
            root@137.184.232.187:/var/www/freefontfinder/static/

      # Deploy the application
      - name: Deploy with Docker Compose
        run: |
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Ensure docker is installed
            if ! command -v docker &> /dev/null; then
              apt-get update
              apt-get install -y docker.io
            fi
            
            # Install latest docker-compose
            if ! command -v docker-compose &> /dev/null; then
              curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            # Create directories if they don't exist
            mkdir -p model logs
            
            # Create directories with proper permissions
            mkdir -p /var/www/freefontfinder/model
            mkdir -p /var/www/freefontfinder/logs
            chmod -R 755 /var/www/freefontfinder
            
            # Verify if model files exist
            if [ ! -f "/var/www/freefontfinder/model/fontCNN_BS64-ED512-IC32.pt" ]; then
              echo "WARNING: Model file not found. Please upload it manually to /var/www/freefontfinder/model/"
            else
              echo "Model files found."
              ls -la /var/www/freefontfinder/model/
            fi
            
            # Pull the latest images
            docker compose -f docker-compose.prod.yml pull
            
            # Stop existing containers
            docker compose -f docker-compose.prod.yml down
            
            # Start containers
            docker compose -f docker-compose.prod.yml up -d
            
            # Show container status
            docker compose -f docker-compose.prod.yml ps
          '

      # Health check
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 15
          
          ssh root@137.184.232.187 '
            cd /var/www/freefontfinder
            
            # Check container status
            docker compose -f docker-compose.prod.yml ps
            
            # Check logs
            docker compose -f docker-compose.prod.yml logs --tail 20
            
            # Test connection
            curl -v http://localhost/test
          '