name: Deploy to Production

# Add permissions for GitHub token
permissions:
  contents: read
  packages: write  # Needed to push to GitHub Container Registry

on:
  push:
    branches:
      - main
      - image_upload
    paths:
      - 'frontend_app.py'
      - 'ml/**'
      - 'templates/**'
      - 'static/**'
      - 'frontend_requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.env'
      - 'nginx.conf'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 137.184.232.187
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push web container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/freefontfinder:latest

      # Install SSH key for server access
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}
          
      # Verify server connection
      - name: Check server connection
        run: |
          if ! ssh -q root@${{ env.SERVER_IP }} exit; then
            echo "ERROR: Cannot connect to server"
            exit 1
          fi

      

      # Setup server directories and permissions
      - name: Setup server directories
        run: |
          ssh root@${{ env.SERVER_IP }} '
            # Create parent directories with proper permissions
            mkdir -p /var/www/freefontfinder
            mkdir -p /var/www/freefontfinder/model
            mkdir -p /var/www/freefontfinder/logs
            mkdir -p /var/www/freefontfinder/static
            
            # Ensure proper permissions
            chmod -R 755 /var/www/freefontfinder
          '
      
      # Copy just the essential files to the server
      - name: Copy deployment files to server
        run: |
          scp docker-compose.yml root@{{ env.SERVER_IP }}:/var/www/freefontfinder/docker-compose.yml
          scp nginx.conf root@{{ env.SERVER_IP }}:/var/www/freefontfinder/nginx.conf
          
          # Copy static files (always needed by nginx)
          rsync -avz \
            static/ \
            root@{{ env.SERVER_IP }}:/var/www/freefontfinder/static/

      # Deploy the application
      - name: Deploy with Docker Compose
        run: |
          ssh root@{{ env.SERVER_IP }} '
            cd /var/www/freefontfinder
            
            # Ensure docker is installed
            if ! command -v docker &> /dev/null; then
              apt-get update
              apt-get install -y docker.io
            fi
            
            # Install docker-compose using apt
            if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
              apt-get update
              apt-get install -y docker-compose-plugin
            fi
            
            # Determine docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Pull the latest images
            $DOCKER_COMPOSE pull
            
            # Stop existing containers
            $DOCKER_COMPOSE down
            
            # Start containers
            $DOCKER_COMPOSE up -d
            
            # Give services time to start
            echo "Waiting for services to start..."
            sleep 10
          '

      # Health check - run from server itself
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait for services to fully start
          sleep 30
          
          ssh root@{{ env.SERVER_IP }} '
            cd /var/www/freefontfinder
            
            # Determine docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            else
              DOCKER_COMPOSE="docker-compose"
            fi
            
            # Check if containers are running
            echo "===== Container Status ====="
            $DOCKER_COMPOSE ps
            
            # Check web service logs for errors
            echo "===== Web Service Logs ====="
            $DOCKER_COMPOSE logs --tail 20 web
            
            # Test connection locally from the server itself
            echo "===== Testing API Endpoint ====="
            curl -s http://localhost/test && echo " - API endpoint test successful" || echo " - API endpoint test FAILED"
            
            # Check if nginx is responding
            echo "===== Testing Nginx ====="
            curl -I http://localhost && echo " - Nginx responding successfully" || echo " - Nginx check FAILED"
            
            # Check SSL if it should be active
            if [ -d "/var/www/freefontfinder/certbot/conf/live/freefontfinder.com" ]; then
              echo "===== Testing SSL ====="
              curl -k -I https://localhost && echo " - HTTPS responding successfully" || echo " - HTTPS check FAILED"
            fi
          '
      
      # Notify on success
      - name: Deployment Result
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "The application is now running at https://freefontfinder.com/"